(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize) 
(scroll-bar-mode -1)
(setq jiadar-makescript "./build.linux")
(display-battery-mode 1)
(tool-bar-mode 0)
(setq next-line-add-newlines nil)
(setq-default truncate-lines t)
(setq truncate-partial-width-windows nil)
(winner-mode 1) ;"C-c <left>" and "C-c <right>" undo and re-do window changes.

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-default nil)
 '(auto-save-interval 0)
 '(auto-save-list-file-prefix nil)
 '(auto-save-timeout 0)
 '(auto-show-mode t t)
 '(custom-enabled-themes (quote (solarized)))
 '(custom-safe-themes
   (quote
    ("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" default)))
 '(delete-auto-save-files nil)
 '(delete-old-versions (quote other))
 '(fill-column 85)
 '(imenu-auto-rescan t)
 '(imenu-auto-rescan-maxout 500000)
 '(kept-new-versions 5)
 '(kept-old-versions 5)
 '(make-backup-file-name-function (quote ignore))
 '(make-backup-files nil)
 '(mouse-wheel-follow-mouse nil)
 '(mouse-wheel-progressive-speed nil)
 '(mouse-wheel-scroll-amount (quote (15)))
 '(package-selected-packages
   (quote
    (flycheck rubocop smart-tab eclim floobits ace-window robe inf-ruby company-emacs-eclim)))
 '(version-control nil))

(set-face-attribute 'default nil :font "Liberation Mono-7.0")
(set-frame-font "Liberation Mono-7.0" nil t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-7.0"))
(set-face-attribute 'default t :font "Liberation Mono-7.0")

(defun jiadar-never-split-a-window nil)
(setq split-window-preferred-function 'jiadar-never-split-a-window)
(add-to-list 'default-frame-alist '(font . "Liberation Mono-7.0"))
(set-face-attribute 'default t :font "Liberation Mono-7.0")

(defun post-load-stuff ()
  (interactive)
  (menu-bar-mode -1)
  )
(add-hook 'window-setup-hook 'post-load-stuff t)

(define-key global-map "\e " 'set-mark-command)
(define-key global-map "\eq" 'append-as-kill)
(define-key global-map "\ez" 'kill-region)
(define-key global-map [M-up] 'previous-blank-line)
(define-key global-map [M-down] 'next-blank-line)
(define-key global-map [M-right] 'forward-word)
(define-key global-map [M-left] 'backward-word)

(define-key global-map "\e:" 'View-back-to-mark)
(define-key global-map "\e;" 'exchange-point-and-mark)

(define-key global-map [f9] 'first-error)
(define-key global-map [f10] 'previous-error)
(define-key global-map [f11] 'next-error)

(define-key global-map "\en" 'next-error)
(define-key global-map "\eN" 'previous-error)

(define-key global-map "\eg" 'goto-line)
(define-key global-map "\ej" 'imenu)

(define-key global-map "" 'copy-region-as-kill)
(define-key global-map "" 'nil)
(define-key global-map "" 'rotate-yank-pointer)
(define-key global-map "" 'copy-region-as-kill)
(define-key global-map "" 'yank)
(define-key global-map "" 'undo)
(define-key global-map "" 'move-end-of-line)
(define-key global-map "\eu" 'undo)
(define-key global-map "\e6" 'upcase-word)
(define-key global-map "\e^" 'captilize-word)
(define-key global-map "\e." 'fill-paragraph)

(require 'ido)
(ido-mode t)

(define-key global-map "\ef" 'find-file)
(define-key global-map "\eF" 'find-file-other-window)

(global-auto-revert-mode t)

(desktop-save-mode 1)
(electric-pair-mode 1)

(require 'multi-term)
(setq multi-term-program "/bin/bash")
(setq term-term-name "xterm") ; bold faced lie
(defun j/configure-term ()
    (interactive)
    (setq truncate-lines 1)
    (define-key term-raw-map (kbd "C-y") 'term-paste)
    (add-hook 'term-mode-hook 'j/configure-term t))

(setq ring-bell-function 'ignore)

(defun insert-timeofday ()
  (interactive "*")
  (insert (format-time-string "---------------- %a, %d %b %y: %I:%M%p")))

(display-time)

(setq next-line-add-newlines nil)
(setq-default truncate-lines t)
(setq truncate-partial-width-windows nil)

(add-to-list 'load-path "~/.emacs.d/lisp/ace-window")

(require 'avy)
(require 'ace-window)

(global-set-key (kbd "C-x o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

(global-set-key (kbd "C-x O") 'previous-multiframe-window)

(progn
  (require 'windmove)
  (windmove-default-keybindings)
  (setq windmove-wrap-around t )
  )

(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))

(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-default-sorting-mode 'major-mode)
(add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))

(defun jiadar-ibuffer-mode-hook ()
  (local-set-key (kbd "RET") 'ibuffer-visit-buffer-other-window))
(add-hook 'ibuffer-mode-hook 'jiadar-ibuffer-mode-hook)
(global-set-key [f9] 'ibuffer)

(setq ibuffer-saved-filter-groups
      '(("Cody"
         ("CPP" (filename . "cpp$"))
         ("Headers" (filename . "h$"))
         )))

(add-hook 'ibuffer-mode-hook
	  '(lambda ()
	     (ibuffer-switch-to-saved-filter-groups "Cody")))
(setq ibuffer-expert t)

(defun ibuffer-advance-motion (direction)
  (forward-line direction)
  (beginning-of-line)
  (if (not (get-text-property (point) 'ibuffer-filter-group-name))
      t
    (ibuffer-skip-properties '(ibuffer-filter-group-name)
                             direction)
    nil))

(defun ibuffer-previous-line (&optional arg)
  "Move backwards ARG lines, wrapping around the list if necessary."
  (interactive "P")
  (or arg (setq arg 1))
  (let (err1 err2)
    (while (> arg 0)
      (cl-decf arg)
      (setq err1 (ibuffer-advance-motion -1)
            err2 (if (not (get-text-property (point) 'ibuffer-title)) 
                     t
                   (goto-char (point-max))
                   (beginning-of-line)
                   (ibuffer-skip-properties '(ibuffer-summary 
                                              ibuffer-filter-group-name) 
                                            -1)
                   nil)))
    (and err1 err2)))

(defun ibuffer-next-line (&optional arg)
  "Move forward ARG lines, wrapping around the list if necessary."
  (interactive "P")
  (or arg (setq arg 1))
  (let (err1 err2)
    (while (> arg 0)
      (cl-decf arg)
      (setq err1 (ibuffer-advance-motion 1)
            err2 (if (not (get-text-property (point) 'ibuffer-summary)) 
                     t
                   (goto-char (point-min))
                   (beginning-of-line)
                   (ibuffer-skip-properties '(ibuffer-summary 
                                              ibuffer-filter-group-name
                                              ibuffer-title)
                                            1)
                   nil)))
    (and err1 err2)))

(defun ibuffer-next-header ()
  (interactive)
  (while (ibuffer-next-line)))

(defun ibuffer-previous-header ()
  (interactive)
  (while (ibuffer-previous-line)))

(define-key ibuffer-mode-map (kbd "<up>") 'ibuffer-previous-line)
(define-key ibuffer-mode-map (kbd "<down>") 'ibuffer-next-line)
(define-key ibuffer-mode-map (kbd "<right>") 'ibuffer-previous-header)
(define-key ibuffer-mode-map (kbd "<left>") 'ibuffer-next-header)

(defun insert-timeofday ()
   (interactive "*")
   (insert (format-time-string "---------------- %a, %d %b %y: %I:%M%p")))

(make-face 'font-lock-fixme-face)
(make-face 'font-lock-note-face)
(modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)

(mapc (lambda (mode)
        (font-lock-add-keywords
         mode
         '(
           ("\\<\\(TODO\\)" 0 'font-lock-fixme-face prepend)
           ("\\<\\(NOTE\\)" 0 'font-lock-note-face prepend)
           )'end))
      '(html-mode nxml-mode web-mode ruby-mode))

(global-set-key [f11] 'shrink-window)
(global-set-key [f12] 'enlarge-window)
(global-set-key (kbd "C-c l") 'linum-mode)
(setq linum-format "%d ")

;; be able to auto-make and run the build with Esc-M

(require 'compile)
(setq compilation-directory-locked nil)

(defun find-project-directory-recursive ()
  (interactive)
  (if (file-exists-p jiadar-makescript) t
      (cd "../")
      (find-project-directory-recursive)))

(defun find-project-directory ()
  "Find the project directory."
  (interactive)
  (setq find-project-from-directory default-directory)
  (switch-to-buffer-other-window "*compilation*")
  (if compilation-directory-locked (cd last-compilation-directory)
  (cd find-project-from-directory)
  (find-project-directory-recursive)
  (setq last-compilation-directory default-directory)))

(defun make-without-asking ()
  "Make the current build."
  (interactive)
  (save-buffer)
  (let ((codewindow (selected-window)))
    (if (find-project-directory) (compile jiadar-makescript))
    (select-window codewindow)))

(define-key global-map "\em" 'make-without-asking)

(require 'smart-tab)
(global-smart-tab-mode 1)

(defun toggle-window-dedication (&optional window)
  (interactive)
  (let ((window (or window (get-buffer-window))))
    (set-window-dedicated-p window (not (window-dedicated-p window)))))

(global-set-key (kbd "C-x d") 'toggle-window-dedication)

(defun undedicate-window (&optional window)
  (interactive)
  (set-window-dedicated-p (or window (get-buffer-window)) nil))

;; Removing annoying dedicated buffer nonsense
(defun switch-to-buffer! (buffer-or-name &optional norecord force-same-window)
  "Like switch-to-buffer but works for dedicated buffers \(though
it will ask first)."
  (interactive
   (list (read-buffer-to-switch "Switch to buffer: ") nil 'force-same-window))
  (when (and (window-dedicated-p (get-buffer-window))
             (yes-or-no-p "This window is dedicated, undedicate it? "))
    (undedicate-window))
  (switch-to-buffer buffer-or-name norecord force-same-window))

(setq flycheck-global-modes '(ruby-mode web-mode))
;; (add-hook 'after-init-hook #'global-flycheck-mode)

;; set up the initial windows
;; for  tmate use 37, for otherwise use 50

;(split-window-vertically 37)
;(other-window 1)
;(multi-term)
;(shrink-window-if-larger-than-buffer)
;(rename-buffer "shell")
;(set-window-dedicated-p (selected-window) t)
;(other-window 1)
(split-window-horizontally)
;(ibuffer)
;(other-window 3)
 

(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
